# 1.全文搜索功能

- `MATCH (col1,col2,...) AGAINST (expr [IN BOOLEAN MODE | WITH QUERY EXPANSION])`

`MySQL`支持全文索引和搜索功能。

`MySQL`中的全文索引是针对`FULLTEXT`类型的索引。
`FULLTEXT`索引仅可用于` MyISAM`表（在MySQL5.6以及以上的版本也可用于InnoDB表）；可以从CHAR、 VARCHAR或TEXT列中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或 CREATE INDEX添加。对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引， 其速度比把资料输入现有FULLTEXT索引的速度更为快。尝试输入以下代码：
```
mysql> CREATE TABLE articles (
 ->   id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
 ->   title VARCHAR(200),
 ->   body TEXT,
 ->   FULLTEXT (title,body)
 -> )
 -> engine=MyISAM 
 ->;
mysql> INSERT INTO articles (title,body) VALUES
 -> ('MySQL Tutorial','DBMS stands for DataBase ...'),
 -> ('How To Use MySQL Well','After you went through a ...'),
 -> ('Optimizing MySQL','In this tutorial we will show ...'),
 -> ('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),
 -> ('MySQL vs. YourSQL','In the following database comparison ...'),
 -> ('MySQL Security','When configured properly, MySQL ...');
mysql> SELECT * FROM articles
 -> WHERE MATCH (title,body) AGAINST ('database');
mysql> SELECT id, MATCH (title,body) AGAINST ('Tutorial')
 -> FROM articles;
mysql> SELECT id, body, MATCH (title,body) AGAINST
 -> ('Security implications of running MySQL as root') AS score
 -> FROM articles WHERE MATCH (title,body) AGAINST
 -> ('Security implications of running MySQL as root');
mysql> SELECT * FROM articles
 -> WHERE MATCH (title,body) AGAINST ('MySQL');
 ```
# 2. Cast函数和操作符

BINARY

BINARY操作符将后面的字符串转换成一个二进制字符串。这是一种简单的方式来促使逐字节而不是逐字符的进行列比较。这使得比较区分大小写，即使该列不被定义为BINARY或 BLOB类型。

mysql> SELECT 'a' = 'A';

mysql> SELECT BINARY 'a' = 'A';

mysql> SELECT 'a' = 'a ';

mysql> SELECT BINARY 'a' = 'a ';
在比较运算中，BINARY会影响整个操作；它可以在任何操作数前被给定，而产生相同的结果。

CAST(expr AS type), CONVERT(expr,type) , CONVERT(expr USING transcoding_name)

CAST()和CONVERT()函数通过获取一个类型的值，转化为另一个被指定类型的值。

这里的类型可以是以下列表中的任意一个：

BINARY[(N)]
CHAR[(N)]
DATE
DATETIME
DECIMAL
SIGNED[INTEGER]
TIME
UNSIGNED [INTEGER]
其中BINARY产生一个二进制字符串。

假如给定了随意长度N，则 BINARY[N]使 cast使用不多于N个字节的参数。同样， CHAR[N]会使 cast 使用不多于N 个字符的参数。

CAST() and CONVERT(... USING ...) 是标准 SQL语法。CONVERT()的非USING格式是ofis ODBC语法。

带有USING的CONVERT()被用来在不同的字符集之间转化数据。在 MySQL中, 自动译码名和相应的字符集名称相同。例如，以下语句将服务器的默认字符集中的字符串 'abc'转化为utf8字符集中相应的字符串：

SELECT CONVERT('abc' USING utf8);
当你想要在一个CREATE ... SELECT语句中创建一个特殊类型的列时，cast函数会很有用：

CREATE TABLE new_table SELECT CAST('2000-01-01' AS DATE);
该函数也用于ENUM列按词法顺序的排序。通常ENUM列的排序在使用内部数值时发生，将这些值按照词法顺序派给 CHAR的结果：

SELECT enum_col FROM tbl_name ORDER BY CAST(enum_col AS CHAR);
CAST(str AS BINARY)和BINARY str的意义相同。 CAST(expr AS CHAR)将表达式视为一个带有默认字符集的字符串。

你不应在不同的格式中使用 CAST()来析取数据，但可以使用诸如LEFT() 或 EXTRACT() 这样的字符串函数来代替。

若要在数值语境中将一个字符串派给一个数值, 通常情况下，除了将字符串值作为数字使用外，你不需要做任何事：

mysql> SELECT 1+'1';
若要在一个字符串语境中使用一个数字，该数字会被自动转化为一个BINARY字符串。

mysql> SELECT CONCAT('hello you ',2);
2.8 其他函数

2.8.1 位函数

对于位运算，MySQL 使用 BIGINT (64位)算法，因此这些操作符的最大范围是 64 位。

| 按位OR:

mysql> SELECT 29 | 15;
& 按位 AND:

mysql> SELECT 29 & 15;
^ 按位XOR:

mysql> SELECT 1 ^ 1;

mysql> SELECT 1 ^ 0;

mysql> SELECT 11 ^ 3;
<< 把一个longlong (BIGINT)数左移两位。

mysql> SELECT 1 << 2;
> 把一个longlong (BIGINT)数右移两位。

mysql> SELECT 4 >> 2;
~ 反转所有位。

mysql> SELECT 5 & ~1;
BIT_COUNT(N) 返回参数N中所设置的位的数量。

mysql> SELECT BIT_COUNT(29);
